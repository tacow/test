测试情况说明：

对象大小为100（一般开发时对象的大小）
测试循环次数为1000

使用Valgrind测试，直接push_back对象的结果为：

==00:00:00:00.000 4281== Memcheck, a memory error detector
==00:00:00:00.000 4281== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==00:00:00:00.000 4281== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==00:00:00:00.000 4281== Command: ./tt 1
==00:00:00:00.000 4281== Parent PID: 4279
==00:00:00:00.000 4281== 
==00:00:00:00.576 4281== 
==00:00:00:00.576 4281== HEAP SUMMARY:
==00:00:00:00.576 4281==     in use at exit: 0 bytes in 0 blocks
==00:00:00:00.576 4281==   total heap usage: 207 allocs, 207 frees, 105,444 bytes allocated
==00:00:00:00.576 4281== 
==00:00:00:00.576 4281== All heap blocks were freed -- no leaks are possible
==00:00:00:00.576 4281== 
==00:00:00:00.576 4281== For counts of detected and suppressed errors, rerun with: -v
==00:00:00:00.576 4281== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)

push_back对象指针的结果为：

==00:00:00:00.000 4284== Memcheck, a memory error detector
==00:00:00:00.000 4284== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==00:00:00:00.000 4284== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==00:00:00:00.000 4284== Command: ./tt 2
==00:00:00:00.000 4284== Parent PID: 4282
==00:00:00:00.000 4284== 
==00:00:00:00.578 4284== 
==00:00:00:00.578 4284== HEAP SUMMARY:
==00:00:00:00.578 4284==     in use at exit: 0 bytes in 0 blocks
==00:00:00:00.578 4284==   total heap usage: 1,019 allocs, 1,019 frees, 108,704 bytes allocated
==00:00:00:00.578 4284== 
==00:00:00:00.578 4284== All heap blocks were freed -- no leaks are possible
==00:00:00:00.578 4284== 
==00:00:00:00.578 4284== For counts of detected and suppressed errors, rerun with: -v
==00:00:00:00.578 4284== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)

从测试对比可以看到后者分配和释放了1000次，而前者为200次（deque块大小512 / 对象大小100 = 5，1000 / 5 = 200），所以虽然直接push_back对象会增加一些对象复制时间，但是却大大减少了内存分配和释放的时间，所以总体时间减少
