1. 特性：

* 可以按照日期和大小分割日志文件
* 可以同时输出至屏幕和文件，或者只输出至文件，输出至屏幕时INFO级别和重要性更低的级别输出至STDOUT，其它输出至STDERR
* 可以快速自动恢复，例如：
    - 磁盘满并清理空间后，可以立即重新输出日志文件
    - 日志目录不可访问并恢复可以访问后，可以立即重新输出日志文件
* 多个线程可以同时通过一个日志对象写入日志，日志对象是线程安全的
* 支持消息修改器，消息修改器可以对日志消息做出特定处理，如替换特殊字符串或者转换消息编码等

2. 规格：

* 在初始化时，需给出日志前缀[PREFIX]，和日志路径[LOG_PATH]：当前在写的日志将被命名为[PREFIX].log，当日期变更或者日志文件达到设定大小时（默认100M），日志文件会被切分，原有日志会被更名为[PREFIX]_[yyyymmddHHMMSS].log（文件名中的日期时间代表日志被切分时的时间），同时[PREFIX].log将被清空并写入新的日志
* 日志级别包括：ERROR、WARNING、NOTICE、INFO、DEBUG、VERBOSE，在写日志时需传入日志级别参数。另外可以设置最大输出级别，若某一条日志的级别数值大于（重要性低于）最大输出级别，则该条日志不输出，例如测试环境可以设置为DEBUG或VERBOSE级别，正式环境设置为INFO级别
* 日志行的格式为：yy-mm-dd HH:MM:SS<<SEP>>[level]<<SEP>>[tid]<<SEP>>[msg]，其中<<SEP>>代表分隔符，默认为“|”，[level]代表日志级别，[tid]代表线程ID，[msg]代表消息内容

3. 接口说明：

* 接口中只有Log函数可以由多个线程同时调用：在输出日志之前，需在单一线程调用Init函数进行初始化，以及修改属性（包括SetMaxFileLen、SetSeperator、SetMaxLevel、SetPrintToScreen）和设置消息修改器，只有在以上初始化和设置完成之后，才可以在多个线程同时使用Log函数输出日志
* Close接口需要在所有线程都结束日志输出后，才可以由单一线程调用以最终关闭日志
* 消息修改器类MsgModifier是一个接口类，特定的消息修改器需继承该接口类，并实现接口函数bool ModifyMsg(const string& inMsg, string& outMsg)，注意该函数需可以在多个线程中同时被执行
* 各接口函数的具体参数定义详见头文件注释说明

